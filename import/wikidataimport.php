<?php
// Import all existing Wikidata items to local table
require("../www/connect.inc.php");

$itemIds = [];

function getBestLabel($labels)
{ // Run through languages and search for existing value; pick first existing
    $languages = ['da', 'en', 'sv', 'nb', 'de', 'es', 'fr', 'fi', 'is'];
    $label = NULL;
    foreach ($languages as $language) {
        if (isset($labels->$language)) {
            $label = $labels->$language->value;
            break;
        }
    }
    return $label;
}

$dbh->query('DROP TABLE IF EXISTS osmetymology.wikidata');

$dbh->query('
    CREATE TABLE osmetymology.wikidata (
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        itemId TEXT,
        name TEXT COLLATE "da_DK",
        description TEXT COLLATE "da_DK",
        labels JSON,
        claims JSON,
        sitelinks JSON
    )
');

$dbh->query('CREATE UNIQUE INDEX wikidata_itemid_idx ON osmetymology.wikidata ("itemid")');

$insertdb = $dbh->prepare('
    INSERT INTO osmetymology.wikidata (itemid, name, description, labels, claims, sitelinks)
    VALUES (?,?,?,?,?,?)
');

// :TODO: Split entities
$itemIds = $dbh->query(
    <<<EOD
    WITH split_content AS (
        SELECT trim(both ' ' FROM unnest(string_to_array("name:etymology:wikidata", ';'))) AS single_items
        FROM osmetymology.ways_agg
    )
    SELECT DISTINCT single_items FROM split_content WHERE single_items ~ '^Q\d+$'
    EOD,
    PDO::FETCH_COLUMN,
    0
)->fetchAll();

function getInstanceOfItems()
{
    global $dbh;
    $instanceofItems = $dbh->query(
        <<<EOD
        SELECT DISTINCT claims#>'{P31,0}'->'mainsnak'->'datavalue'->'value'->>'id' AS instanceOfItemId
        FROM osmetymology.wikidata w
        WHERE claims#>'{P31,0}'->'mainsnak'->'datavalue'->'value'->>'id' IS NOT NULL
        AND claims#>'{P31,0}'->'mainsnak'->'datavalue'->'value'->>'id' NOT IN (SELECT itemid FROM osmetymology.wikidata)
        EOD,
        PDO::FETCH_COLUMN,
        0
    )->fetchAll();
    return $instanceofItems;
}

function importItemIds($itemIds)
{
    global $insertdb;
    $itemLimit = 50;
    $apiurlprefix = 'https://www.wikidata.org/w/api.php?action=wbgetentities&format=json&ids=';

    $chunks = array_chunk($itemIds, $itemLimit);

    print "Importing " . count($itemIds) . " items in " . count($chunks) . " chunks:" . PHP_EOL;
    foreach ($chunks as $chunkid => $chunk) {
        print "Chunk " . ($chunkid + 1) . " of " . (count($chunks)) . PHP_EOL;
        $itemList = implode('|', $chunk);
        $url = $apiurlprefix . $itemList;
        $jsonResult = json_decode(file_get_contents($url)); // TODO: Error handling
        foreach ($jsonResult->entities as $entity) {
            $pageid = $entity->id;
            if (isset($entity->redirects->from)) {
                $pageid = $entity->redirects->from; // for the time, preserve redirects as their own topic to avoid duplicates
            }
            $name = getBestLabel($entity->labels);
            $description = getBestLabel($entity->descriptions);
            $labels = json_encode($entity->labels);
            $claims = json_encode($entity->claims);
            $sitelinks = json_encode($entity->sitelinks);
            $insertdb->execute([$pageid, $name, $description, $labels, $claims, $sitelinks]);
        }
    }
    return true;
}
print date("H:i:s") . ": Initial import" . PHP_EOL;
importItemIds($itemIds);
print date("H:i:s") . ": Fetching 'Instance of' items" . PHP_EOL;
$instanceofItems = getInstanceOfItems();
print date("H:i:s") . ": Instance import" . PHP_EOL;
importItemIds($instanceofItems);
